"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ DOT —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
"""

from dot_parser import parse_dot_file, EdgeType, NodeType
from typing import Dict, List, Set


class ArchitectureAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""

    def __init__(self, graph):
        self.graph = graph

    def get_layer_modules(self, layer_name: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–æ–¥—É–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Å–ª–æ—è."""
        return [
            node_id
            for node_id in self.graph.nodes.keys()
            if f"::{layer_name}" in node_id
        ]

    def get_dependencies(self, node_id: str) -> Dict[str, List[str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∑–ª–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º."""
        edges = self.graph.get_edges_from(node_id)
        dependencies = {"owns": [], "uses": []}

        for edge in edges:
            dep_type = edge.attributes.edge_type.value
            dependencies[dep_type].append(edge.target)

        return dependencies

    def find_circular_dependencies(self) -> List[List[str]]:
        """–ù–∞–π—Ç–∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º)."""
        cycles = []
        visited = set()
        rec_stack = set()

        def dfs(node, path):
            if node in rec_stack:
                # –ù–∞–π–¥–µ–Ω —Ü–∏–∫–ª
                cycle_start = path.index(node)
                cycle = path[cycle_start:] + [node]
                cycles.append(cycle)
                return

            if node in visited:
                return

            visited.add(node)
            rec_stack.add(node)

            for neighbor in self.graph.get_neighbors(node):
                dfs(neighbor, path + [neighbor])

            rec_stack.remove(node)

        for node_id in self.graph.nodes:
            if node_id not in visited:
                dfs(node_id, [node_id])

        return cycles

    def get_layer_violations(self) -> List[Dict]:
        """–ù–∞–π—Ç–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å–ª–æ—ë–≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã."""
        violations = []
        layers = ["domain", "application", "infrastructure"]

        for i, layer in enumerate(layers):
            layer_modules = self.get_layer_modules(layer)

            for module in layer_modules:
                edges = self.graph.get_edges_from(module)
                uses_edges = [
                    e for e in edges if e.attributes.edge_type == EdgeType.USES
                ]

                for edge in uses_edges:
                    target_layer = None
                    for j, target_layer_name in enumerate(layers):
                        if f"::{target_layer_name}" in edge.target:
                            target_layer = j
                            break

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ: —Å–ª–æ–π –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Å–ª–æ—ë–≤ –≤—ã—à–µ
                    if target_layer is not None and target_layer > i:
                        violations.append(
                            {
                                "source": module,
                                "target": edge.target,
                                "source_layer": layer,
                                "target_layer": layers[target_layer],
                                "violation_type": "layer_dependency",
                            }
                        )

        return violations

    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥—Ä–∞—Ñ—É."""
        stats = {
            "total_nodes": len(self.graph.nodes),
            "total_edges": len(self.graph.edges),
            "node_types": {},
            "edge_types": {},
            "layers": {},
        }

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∑–ª–æ–≤
        for node in self.graph.nodes.values():
            node_type = node.attributes.node_type.value
            stats["node_types"][node_type] = stats["node_types"].get(node_type, 0) + 1

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ë–±–µ—Ä
        for edge in self.graph.edges:
            edge_type = edge.attributes.edge_type.value
            stats["edge_types"][edge_type] = stats["edge_types"].get(edge_type, 0) + 1

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ—ë–≤
        layers = ["application", "domain", "infrastructure"]
        for layer in layers:
            layer_modules = self.get_layer_modules(layer)
            stats["layers"][layer] = len(layer_modules)

        return stats


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("=== –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ EVENT_SOURCING ===\n")

    # –ü–∞—Ä—Å–∏–º –≥—Ä–∞—Ñ
    graph = parse_dot_file("example/graph.dot")
    analyzer = ArchitectureAnalyzer(graph)

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = analyzer.get_statistics()
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  –£–∑–ª–æ–≤: {stats['total_nodes']}")
    print(f"  –†—ë–±–µ—Ä: {stats['total_edges']}")
    print(f"  –¢–∏–ø—ã —É–∑–ª–æ–≤: {stats['node_types']}")
    print(f"  –¢–∏–ø—ã —Ä—ë–±–µ—Ä: {stats['edge_types']}")
    print(f"  –ú–æ–¥—É–ª–∏ –ø–æ —Å–ª–æ—è–º: {stats['layers']}")
    print()

    # –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–ª–æ—ë–≤
    print("üèóÔ∏è –ê–ù–ê–õ–ò–ó –°–õ–û–Å–í:")
    layers = ["application", "domain", "infrastructure"]
    for layer in layers:
        main_module = f"event_sourcing::{layer}"
        if main_module in graph.nodes:
            deps = analyzer.get_dependencies(main_module)
            print(f"  {layer.upper()}:")
            print(f"    –í–ª–∞–¥–µ–µ—Ç: {len(deps['owns'])} –º–æ–¥—É–ª—è–º–∏")
            print(f"    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç: {len(deps['uses'])} –º–æ–¥—É–ª–µ–π")
            if deps["uses"]:
                print(
                    f"    –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {deps['uses'][:3]}{'...' if len(deps['uses']) > 3 else ''}"
                )
    print()

    # –ü–æ–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    print("‚ö†Ô∏è –ù–ê–†–£–®–ï–ù–ò–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–´:")
    violations = analyzer.get_layer_violations()
    if violations:
        for violation in violations[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"  {violation['source_layer']} -> {violation['target_layer']}")
            print(f"    {violation['source']} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {violation['target']}")
    else:
        print("  –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    print()

    # –ü–æ–∏—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("üîÑ –¶–ò–ö–õ–ò–ß–ï–°–ö–ò–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:")
    cycles = analyzer.find_circular_dependencies()
    if cycles:
        print(f"  –ù–∞–π–¥–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {len(cycles)}")
        for i, cycle in enumerate(cycles[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"  –¶–∏–∫–ª {i+1}: {' -> '.join(cycle)}")
    else:
        print("  –¶–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    print()

    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")


if __name__ == "__main__":
    main()
